name: Continuous Delivery

on:
  pull_request:
  release:
    types:
      - published

jobs:
  macos:
    name: macOS
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # To sign the macOS version of kubenav we have to generate a new certificate, which can then be used in the GitHub
      # Action. More information regarding the creation of the certificate and the usage within this GitHub Action can
      # be found on the following sites:
      #   - https://localazy.com/blog/how-to-automatically-sign-macos-apps-using-github-actions
      #   - https://docs.github.com/en/actions/deployment/deploying-xcode-applications/installing-an-apple-certificate-on-macos-runners-for-xcode-development
      - name: Install the Apple Certificate
        if: ${{ github.event_name == 'release' || github.event.pull_request.head.repo.full_name == github.repository }}
        env:
          MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}
          MACOS_CERTIFICATE_PASSWORD: ${{ secrets.MACOS_CERTIFICATE_PASSWORD }}
          MACOS_KEYCHAIN_PASSWORD: ${{ secrets.MACOS_KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate from secrets
          echo -n "$MACOS_CERTIFICATE" | base64 --decode --output $CERTIFICATE_PATH

          # create temporary keychain
          security create-keychain -p "$MACOS_KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$MACOS_KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$MACOS_CERTIFICATE_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # check that certificate was added
          security find-identity -v

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version-file: go.mod
          cache: true
          cache-dependency-path: go.sum

      - name: Generate Library
        run: |
          make library-macos

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.7.3'
          channel: 'stable'
          cache: true
          cache-key: 'flutter-:os:-:channel:-:version:-:arch:-:hash:'
          cache-path: '${{ runner.tool_cache }}/flutter/:channel:-:version:-:arch:'

      - name: Install Dependencies
        run: |
          flutter pub get

      - name: Build
        run: |
          flutter config --enable-macos-desktop
          flutter build macos --release

      - name: Code Sign
        if: ${{ github.event_name == 'release' || github.event.pull_request.head.repo.full_name == github.repository }}
        run: |
          codesign --deep --force --options runtime --sign "Developer ID Application: Rico Berger (75AP6HWLUD)" build/macos/Build/Products/Release/kubenav.app -v

      - name: Package
        run: |
          ditto -c -k --keepParent "build/macos/Build/Products/Release/kubenav.app" "build/macos/Build/Products/Release/kubenav-macos-universal.zip"

      # If the following step returns an error like
      #   Current status: Invalid..........Processing complete
      #     id: <RANDOM-ID>
      #     status: Invalid
      #
      # the following command can be used for debugging
      #   xcrun notarytool log <RANDOM-ID> --key AuthKey_${MACOS_ASC_API_KEY}.p8 --key-id $MACOS_ASC_API_KEY --issuer $MACOS_ACS_ISSUER
      - name: Upload to Notarization Service
        if: ${{ github.event_name == 'release' || github.event.pull_request.head.repo.full_name == github.repository }}
        env:
          MACOS_ASC_AUTH_KEY: ${{ secrets.MACOS_ASC_AUTH_KEY }}
          MACOS_ASC_API_KEY: ${{ secrets.MACOS_ASC_API_KEY }}
          MACOS_ACS_ISSUER: ${{ secrets.MACOS_ACS_ISSUER }}
        run: |
          mkdir -p ~/.appstoreconnect/private_keys
          echo -n "$MACOS_ASC_AUTH_KEY" > ~/.appstoreconnect/private_keys/AuthKey_${MACOS_ASC_API_KEY}.p8
          xcrun notarytool submit build/macos/Build/Products/Release/kubenav-macos-universal.zip --key ~/.appstoreconnect/private_keys/AuthKey_${MACOS_ASC_API_KEY}.p8 --key-id $MACOS_ASC_API_KEY --issuer $MACOS_ACS_ISSUER --wait

      - name: Upload Artifacts (PR)
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/upload-artifact@v3
        with:
          name: kubenav-macos-universal.zip
          path: build/macos/Build/Products/Release/kubenav-macos-universal.zip

      - name: Upload Artifacts (Release)
        uses: shogo82148/actions-upload-release-asset@v1
        if: ${{ github.event_name == 'release' && github.event.action == 'published' }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: build/macos/Build/Products/Release/kubenav-macos-universal.zip

      - name: Clean up Keychain and AuthKey for Notarization Service
        if: ${{ always() }}
        continue-on-error: true
        env:
          MACOS_ASC_API_KEY: ${{ secrets.MACOS_ASC_API_KEY }}
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
          rm -rf ~/.appstoreconnect/private_keys/AuthKey_${MACOS_ASC_API_KEY}.p8

  linux:
    name: Linux
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Packages
        run: |
          # Required for Flutter
          sudo apt-get update -y
          sudo apt-get install -y ninja-build libgtk-3-dev
          # Required for AppImage
          sudo add-apt-repository universe
          sudo apt install libfuse2

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version-file: go.mod
          cache: true
          cache-dependency-path: go.sum

      - name: Generate Library
        run: |
          make library-linux

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.7.3'
          channel: 'stable'
          cache: true
          cache-key: 'flutter-:os:-:channel:-:version:-:arch:-:hash:'
          cache-path: '${{ runner.tool_cache }}/flutter/:channel:-:version:-:arch:'

      - name: Install Dependencies
        run: |
          flutter pub get

      - name: Build
        run: |
          flutter config --enable-linux-desktop
          flutter build linux --release

      - name: Package
        run: |
          wget https://github.com/AppImage/AppImageKit/releases/download/13/appimagetool-x86_64.AppImage
          chmod +x appimagetool-x86_64.AppImage
          cp linux/kubenav.so build/linux/x64/release/bundle/lib/
          cp linux/AppRun build/linux/x64/release/bundle/
          cp linux/kubenav.desktop build/linux/x64/release/bundle/
          cp linux/kubenav.png build/linux/x64/release/bundle/
          ./appimagetool-x86_64.AppImage build/linux/x64/release/bundle/

      - name: Upload Artifacts (PR)
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/upload-artifact@v3
        with:
          name: kubenav-x86_64.AppImage
          path: kubenav-x86_64.AppImage

      - name: Upload Artifacts (Release)
        uses: shogo82148/actions-upload-release-asset@v1
        if: ${{ github.event_name == 'release' && github.event.action == 'published' }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: kubenav-x86_64.AppImage

  windows:
    name: Windows
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version-file: go.mod
          cache: true
          cache-dependency-path: go.sum

      - name: Generate Library
        run: |
          make library-windows

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.7.3'
          channel: 'stable'
          cache: true
          cache-key: 'flutter-:os:-:channel:-:version:-:arch:-:hash:'
          cache-path: '${{ runner.tool_cache }}/flutter/:channel:-:version:-:arch:'

      - name: Install Dependencies
        run: |
          flutter pub get

      - name: Build
        run: |
          flutter config --enable-windows-desktop
          flutter build windows --release

      - name: Package
        run: |
          cp windows/kubenav.dll build/windows/runner/Release/
          mv build/windows/runner/Release build/windows/runner/kubenav
          cd build/windows/runner && 7z a -tzip kubenav-windows-x86_64.zip kubenav

      - name: Upload Artifacts (PR)
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/upload-artifact@v3
        with:
          name: kubenav-windows-x86_64.zip
          path: build/windows/runner/kubenav-windows-x86_64.zip

      - name: Upload Artifacts (Release)
        uses: shogo82148/actions-upload-release-asset@v1
        if: ${{ github.event_name == 'release' && github.event.action == 'published' }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: build/windows/runner/kubenav-windows-x86_64.zip
